'use client';
import { useState } from 'react';
import { Download, Eye } from 'lucide-react';
import Image from 'next/image';

const translations = {
  en: {
    placeholder: "Enter your image description...",
    generate: "Generate Images",
    generating: "Generating...",
    error: "Error generating images",
    close: "Close",
  },
  sw: {
    placeholder: "Weka maelezo ya picha yako...",
    generate: "Tengeneza Picha",
    generating: "Inatengeneza...",
    error: "Hitilafu kutengeneza picha",
    close: "Funga",
  },
};

export default function GeminiImageGenerator({
  language = "en",
  prompt,
  setPrompt,
}: {
  language?: "en" | "sw";
  prompt: string;
  setPrompt: (val: string) => void;
}) {
  const [images, setImages] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  const t = translations[language];

  const generateImages = async () => {
    setLoading(true);
    setError(null);
    setImages([]);
    
    try {
      const res = await fetch('/api/gemini/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });
      
      const data = await res.json();
      
      if (data.error) {
        setError(data.error);
      } else if (data.data?.images) {
        setImages(data.data.images.map((image: string) => `data:image/png;base64,${image}`));
      }
    } catch (e) {
      setError('Error generating images');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = (imageData: string) => {
    const link = document.createElement('a');
    link.href = imageData;
    link.download = 'generated-image.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="max-w-4xl mx-auto p-4 sm:p-6 md:p-8 flex flex-col items-center">
      <div className="w-full max-w-2xl mb-8">
        <textarea
          rows={4}
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder={t.placeholder}
          className="w-full p-4 border rounded-lg mb-4 focus:ring-2 focus:ring-blue-500 focus:border-transparent text-black placeholder-gray-500"
        />
        <button
          onClick={generateImages}
          disabled={loading || !prompt.trim()}
          className="w-full px-6 py-3 bg-blue-600 text-white rounded-lg disabled:opacity-50 hover:bg-blue-700 transition-colors"
        >
          {loading ? t.generating : t.generate}
        </button>
      </div>
      
      {error && (
        <div className="mt-4 p-4 bg-red-100 text-red-700 rounded-lg w-full">
          {t.error}
        </div>
      )}
      
      {images.length > 0 && (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 w-full">
          {images.map((imageData, index) => (
            <div key={index} className="relative group">
              <div className="bg-white rounded-lg shadow-lg overflow-hidden">
                <Image
                  src={imageData}
                  alt={`Generated by Gemini ${index + 1}`}
                  className="w-full h-48 sm:h-64 object-cover"
                  width={256}
                  height={256}
                />
                <div className="absolute top-2 right-2 flex gap-2">
                  <button
                    onClick={() => setSelectedImage(imageData)}
                    className="p-2 bg-white/90 rounded-full shadow-lg hover:bg-white transition-all duration-300 hover:shadow-blue-500/50 hover:shadow-lg"
                  >
                    <Eye className="w-5 h-5 text-gray-700" />
                  </button>
                  <button
                    onClick={() => handleDownload(imageData)}
                    className="p-2 bg-white/90 rounded-full shadow-lg hover:bg-white transition-all duration-300 hover:shadow-blue-500/50 hover:shadow-lg"
                  >
                    <Download className="w-5 h-5 text-gray-700" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Image Modal */}
      {selectedImage && (
        <div 
          className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4"
          onClick={() => setSelectedImage(null)}
        >
          <div className="relative max-w-4xl w-full">
            <button
              onClick={() => setSelectedImage(null)}
              className="absolute -top-10 right-0 text-white hover:text-blue-400 transition-colors"
            >
              {t.close}
            </button>
            <Image
              src={selectedImage}
              alt="Full size preview"
              className="max-h-[80vh] w-auto mx-auto rounded-lg shadow-2xl"
              width={1280}
              height={720}
            />
          </div>
        </div>
      )}
    </div>
  );
}